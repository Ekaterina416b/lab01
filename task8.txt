./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const char*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const wchar_t*> >]’
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::ReadableIterator<Iterator>::~ReadableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:48:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   48 |       BOOST_CONCEPT_USAGE(ReadableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::IncrementableIterator<Iterator>::~IncrementableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:120:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  120 |       BOOST_CONCEPT_USAGE(IncrementableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const wchar_t*> >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2s_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2s_mt_posix::filter boost::log::v2s_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2s_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/setup/matches_relation_factory.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/log/src/setup/matches_relation_factory.cpp:35:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from libs/log/src/setup/matches_relation_factory.cpp:30:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/setup/default_formatter_factory.o
...skipped <pbin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_log_setup.a(clean) for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>setup/init_from_settings.o...
...skipped <pbin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_log_setup.a for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>setup/init_from_settings.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_log_setup.a for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_log_setup.a...
...on 15000th target...
gcc.compile.c++.pch bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/../src/tr1/pch.hpp.gch
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_laguerre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_legendre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/beta.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_2.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_3.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_i.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_j.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_k.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_neumann.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_2.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_3.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expint.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hermite.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/laguerre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/legendre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/riemann_zeta.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_bessel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_legendre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_neumann.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_tr1.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1.a
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_laguerref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/betaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_2f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_3f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_if.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_jf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_kf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_neumannf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_2f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_3f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expintf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hermitef.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/laguerref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/riemann_zetaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_besself.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_neumannf.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_tr1f.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1f.a
gcc.compile.c++ bin.v2/libs/math/config/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/has_long_double_support.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_laguerrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/assoc_legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/betal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_2l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/comp_ellint_3l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_il.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_jl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_bessel_kl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cyl_neumannl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_2l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/ellint_3l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expintl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hermitel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/laguerrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/riemann_zetal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_bessell.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/sph_neumannl.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_tr1l.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1l.a
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/acosh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/asinh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/atanh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cbrt.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/copysign.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erfc.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expm1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fmax.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fmin.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fpclassify.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hypot.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lgamma.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/llround.o
...on 15100th target...
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/log1p.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lround.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nextafter.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nexttoward.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/round.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/tgamma.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/trunc.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_c99.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99.a
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/acoshf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/asinhf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/atanhf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cbrtf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/copysignf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erfcf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erff.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expm1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fmaxf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fminf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fpclassifyf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hypotf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lgammaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/llroundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/log1pf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lroundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nextafterf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nexttowardf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/roundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/tgammaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/truncf.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_c99f.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99f.a
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/acoshl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/asinhl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/atanhl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cbrtl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/copysignl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erfcl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/erfl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/expm1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fmaxl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fminl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/fpclassifyl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/hypotl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lgammal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/llroundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/log1pl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/lroundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nextafterl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/nexttowardl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/roundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/tgammal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/truncl.o
gcc.archive bin.v2/libs/math/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_math_c99l.a
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99l.a
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cmdline.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/config_file.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/options_description.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/parsers.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/variables_map.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/value_semantic.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/positional_options.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/utf8_codecvt_facet.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/convert.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/winmain.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/split.o
gcc.archive bin.v2/libs/program_options/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_program_options.a
common.copy ~/Рабочий стол/Boost/lib/libboost_program_options.a
gcc.compile.c++ bin.v2/libs/random/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/random_device.o
gcc.archive bin.v2/libs/random/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_random.a
common.copy ~/Рабочий стол/Boost/lib/libboost_random.a
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_archive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_iserializer.o
...on 15200th target...
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_oserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_pointer_iserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_pointer_oserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_serializer_map.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_text_iprimitive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_text_oprimitive.o
In file included from libs/serialization/src/basic_text_oprimitive.cpp:20:
./boost/archive/impl/basic_text_oprimitive.ipp: In destructor ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive()’:
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from libs/serialization/src/basic_text_oprimitive.cpp:15:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp: In instantiation of ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive() [with OStream = std::basic_ostream<char>]’:
libs/serialization/src/basic_text_oprimitive.cpp:26:16:   required from here
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_xml_archive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/binary_iarchive.o
In file included from ./boost/detail/endian.hpp:9,
                 from ./boost/archive/impl/basic_binary_iarchive.ipp:25,
                 from libs/serialization/src/binary_iarchive.cpp:20:
./boost/predef/detail/endian_compat.h:11:161: note: ‘#pragma message: The use of BOOST_*_ENDIAN and BOOST_BYTE_ORDER is deprecated. Please include <boost/predef/other/endian.h> and use BOOST_ENDIAN_*_BYTE instead’
   11 | #pragma message("The use of BOOST_*_ENDIAN and BOOST_BYTE_ORDER is deprecated. Please include <boost/predef/other/endian.h> and use BOOST_ENDIAN_*_BYTE instead")
      |                                                                                                                                                                 ^
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/binary_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/extended_type_info.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/extended_type_info_typeid.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/extended_type_info_no_rtti.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/stl_port.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/text_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/text_oarchive.o
^Agcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_text_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_text_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_binary_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_binary_oarchive.o
^Agcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_xml_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_xml_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/void_cast.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/archive_exception.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_grammar.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_iarchive.o
In file included from libs/serialization/src/xml_iarchive.cpp:23:
./boost/archive/impl/xml_iarchive_impl.ipp: In destructor ‘boost::archive::xml_iarchive_impl<Archive>::~xml_iarchive_impl()’:
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/istream:40,
                 from ./boost/archive/xml_iarchive.hpp:19,
                 from libs/serialization/src/xml_iarchive.cpp:17:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp: In instantiation of ‘boost::archive::xml_iarchive_impl<Archive>::~xml_iarchive_impl() [with Archive = boost::archive::xml_iarchive]’:
./boost/archive/xml_iarchive.hpp:127:50:   required from here
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_oarchive.o
In file included from libs/serialization/src/xml_oarchive.cpp:23:
./boost/archive/impl/xml_oarchive_impl.ipp: In destructor ‘boost::archive::xml_oarchive_impl<Archive>::~xml_oarchive_impl()’:
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/archive/xml_oarchive.hpp:19,
                 from libs/serialization/src/xml_oarchive.cpp:17:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp: In instantiation of ‘boost::archive::xml_oarchive_impl<Archive>::~xml_oarchive_impl() [with Archive = boost::archive::xml_oarchive]’:
./boost/archive/xml_oarchive.hpp:122:50:   required from here
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_archive_exception.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/codecvt_null.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/utf8_codecvt_facet.o
gcc.archive bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_serialization.a
common.copy ~/Рабочий стол/Boost/lib/libboost_serialization.a
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_text_wiprimitive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic_text_woprimitive.o
In file included from libs/serialization/src/basic_text_woprimitive.cpp:26:
./boost/archive/impl/basic_text_oprimitive.ipp: In destructor ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive()’:
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from libs/serialization/src/basic_text_woprimitive.cpp:11:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp: In instantiation of ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive() [with OStream = std::basic_ostream<wchar_t>]’:
libs/serialization/src/basic_text_woprimitive.cpp:31:16:   required from here
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/text_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/text_woarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_text_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_text_woarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_wgrammar.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_wiarchive.o
In file included from libs/serialization/src/xml_wiarchive.cpp:28:
./boost/archive/impl/xml_wiarchive_impl.ipp: In destructor ‘boost::archive::xml_wiarchive_impl<Archive>::~xml_wiarchive_impl()’:
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/istream:40,
                 from ./boost/archive/xml_wiarchive.hpp:24,
                 from libs/serialization/src/xml_wiarchive.cpp:22:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp: In instantiation of ‘boost::archive::xml_wiarchive_impl<Archive>::~xml_wiarchive_impl() [with Archive = boost::archive::xml_wiarchive]’:
./boost/archive/xml_wiarchive.hpp:134:52:   required from here
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_woarchive.o
In file included from libs/serialization/src/xml_woarchive.cpp:28:
./boost/archive/impl/xml_woarchive_impl.ipp: In destructor ‘boost::archive::xml_woarchive_impl<Archive>::~xml_woarchive_impl()’:
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/archive/xml_woarchive.hpp:30,
                 from libs/serialization/src/xml_woarchive.cpp:22:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp: In instantiation of ‘boost::archive::xml_woarchive_impl<Archive>::~xml_woarchive_impl() [with Archive = boost::archive::xml_woarchive]’:
./boost/archive/xml_woarchive.hpp:116:52:   required from here
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
In file included from ./boost/archive/impl/xml_woarchive_impl.ipp:41:
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘boost::archive::iterators::wchar_from_mb<Base>::sliding_buffer<T>::sliding_buffer() [with T = char; Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:130:31:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:102:30: warning: member ‘boost::archive::iterators::wchar_from_mb<boost::archive::iterators::xml_escape<const char*> >::sliding_buffer<char>::m_buffer’ is used uninitialized [-Wuninitialized]
  102 |             m_next_available(m_buffer.begin()),
      |                              ^~~~~~~~
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘boost::archive::iterators::wchar_from_mb<Base>::sliding_buffer<T>::sliding_buffer() [with T = wchar_t; Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:130:31:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:102:30: warning: member ‘boost::archive::iterators::wchar_from_mb<boost::archive::iterators::xml_escape<const char*> >::sliding_buffer<wchar_t>::m_buffer’ is used uninitialized [-Wuninitialized]
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘void boost::archive::iterators::wchar_from_mb<Base>::drain() [with Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:133:9:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:168:31: warning: unused variable ‘r’ [-Wunused-variable]
  168 |     std::codecvt_base::result r = m_codecvt_facet.in(
      |                               ^
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_xml_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/polymorphic_xml_woarchive.o
gcc.archive bin.v2/libs/serialization/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_wserialization.a
common.copy ~/Рабочий стол/Boost/lib/libboost_wserialization.a
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/noop.o
gcc.archive bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_stacktrace_noop.a
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_noop.a
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/backtrace.o
gcc.archive bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_stacktrace_backtrace.a
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_backtrace.a
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/addr2line.o
gcc.archive bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_stacktrace_addr2line.a
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_addr2line.a
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/basic.o
gcc.archive bin.v2/libs/stacktrace/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_stacktrace_basic.a
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_basic.a
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/execution_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/debug.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cpp_main.o
gcc.archive bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_prg_exec_monitor.a
common.copy ~/Рабочий стол/Boost/lib/libboost_prg_exec_monitor.a
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/compiler_log_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/decorator.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/framework.o
In file included from libs/test/src/framework.cpp:16:
./boost/test/impl/framework.ipp: In member function ‘boost::unit_test::framework::state::execution_result boost::unit_test::framework::state::execute_test_tree(boost::unit_test::test_unit_id, unsigned int, const random_generator_helper*)’:
./boost/test/impl/framework.ipp:763:44: warning: ‘void std::random_shuffle(_RAIter, _RAIter, _Generator&&) [with _RAIter = __gnu_cxx::__normal_iterator<long unsigned int*, vector<long unsigned int> >; _Generator = const boost::unit_test::framework::state::random_generator_helper&]’ is deprecated: use 'std::shuffle' instead [-Wdeprecated-declarations]
  763 |                         std::random_shuffle( children_with_the_same_rank.begin(), children_with_the_same_rank.end(), rand_gen );
      |                         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/13/functional:67,
                 from ./boost/smart_ptr/detail/shared_count.hpp:38,
                 from ./boost/smart_ptr/shared_ptr.hpp:28,
                 from ./boost/shared_ptr.hpp:17,
                 from ./boost/test/execution_monitor.hpp:24,
                 from ./boost/test/impl/framework.ipp:20:
/usr/include/c++/13/bits/stl_algo.h:4620:5: note: declared here
 4620 |     random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
      |     ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/plain_report_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/progress_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/results_collector.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/results_reporter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/test_framework_init_observer.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/test_tools.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/test_tree.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/unit_test_log.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/unit_test_main.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/unit_test_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/unit_test_parameters.o
^[[Agcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/junit_log_formatter.o
^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[Agcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_log_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/xml_report_formatter.o
...on 15300th target...
gcc.archive bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_unit_test_framework.a
common.copy ~/Рабочий стол/Boost/lib/libboost_unit_test_framework.a
gcc.compile.c++ bin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o
^[[AIn file included from /usr/include/pthread.h:33,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr-default.h:35,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr.h:148,
                 from /usr/include/c++/13/ext/atomicity.h:35,
                 from /usr/include/c++/13/bits/shared_ptr_base.h:61,
                 from /usr/include/c++/13/bits/shared_ptr.h:53,
                 from /usr/include/c++/13/memory:80,
                 from ./boost/config/no_tr1/memory.hpp:21,
                 from ./boost/get_pointer.hpp:14,
                 from ./boost/bind/mem_fn.hpp:25,
                 from ./boost/mem_fn.hpp:22,
                 from ./boost/bind/bind.hpp:26,
                 from ./boost/bind.hpp:22,
                 from ./boost/thread/pthread/shared_mutex.hpp:12,
                 from ./boost/thread/shared_mutex.hpp:28,
                 from libs/type_erasure/src/dynamic_binding.cpp:14:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden  -DBOOST_ALL_NO_LIB=1 -DBOOST_CHRONO_STATIC_LINK=1 -DBOOST_SYSTEM_STATIC_LINK=1 -DBOOST_THREAD_BUILD_LIB=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_LIB=1 -DNDEBUG  -I"." -c -o "bin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o" "libs/type_erasure/src/dynamic_binding.cpp"

...failed gcc.compile.c++ bin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o...
...skipped <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_type_erasure.a(clean) for lack of <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>dynamic_binding.o...
...skipped <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_type_erasure.a for lack of <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>dynamic_binding.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_type_erasure.a for lack of <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden>libboost_type_erasure.a...
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_cpp_exprgrammar.o
^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[AIn file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_cpp_exprgrammar.cpp:14:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’ at ./boost/wave/util/macro_helpers.hpp:215:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’ at ./boost/wave/util/macro_helpers.hpp:215:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_cpp_grammar.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_cpp_literalgrs.o
^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[A^[[Agcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_defined_grammar.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_predef_macros.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_re2c_lexer.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_re2c_lexer.cpp:16:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1719:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1711:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2376:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = char*; T2 = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = char*; ItOrChar = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = const char*; T2 = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = const char*; ItOrChar = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1879:31:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = const char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = const char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/instantiate_re2c_lexer_str.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_re2c_lexer_str.cpp:16:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1719:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1711:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2376:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = char*; T2 = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = char*; ItOrChar = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = const char*; T2 = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = const char*; ItOrChar = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1879:31:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/token_ids.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from libs/wave/src/token_ids.cpp:18:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
In file included from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/token_ids.cpp:22:
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/wave_config_constant.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cpplexer/re2clex/aq.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cpplexer/re2clex/cpp_re.o
gcc.archive bin.v2/libs/wave/build/gcc-13.2.0/release/link-static/threadapi-pthread/threading-multi/visibility-hidden/libboost_wave.a
common.copy ~/Рабочий стол/Boost/lib/libboost_wave.a
gcc.compile.c++ bin.v2/libs/atomic/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lockpool.o
gcc.link.dll bin.v2/libs/atomic/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_atomic.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_atomic.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_atomic.so
gcc.compile.c++ bin.v2/libs/system/build/gcc-13.2.0/release/threading-multi/visibility-hidden/error_code.o
gcc.link.dll bin.v2/libs/system/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_system.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_system.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_system.so
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/threading-multi/visibility-hidden/chrono.o
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/threading-multi/visibility-hidden/thread_clock.o
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/threading-multi/visibility-hidden/process_cpu_clocks.o
gcc.link.dll bin.v2/libs/chrono/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_chrono.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_chrono.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_chrono.so
gcc.compile.c bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/alloc_lib.o
In file included from libs/container/src/dlmalloc_ext_2_8_6.c:38,
                 from libs/container/src/alloc_lib.c:24:
In function ‘internal_multialloc_arrays’,
    inlined from ‘boost_cont_multialloc_arrays’ at libs/container/src/dlmalloc_ext_2_8_6.c:1108:13:
libs/container/src/dlmalloc_ext_2_8_6.c:1081:41: warning: iteration 2305843009213693951 invokes undefined behavior [-Waggressive-loop-optimizations]
 1081 |                size = request2size(sizes[i]*element_size);
      |                                         ^
libs/container/src/dlmalloc_2_8_6.c:2231:6: note: in definition of macro ‘request2size’
 2231 |   (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
      |      ^~~
libs/container/src/dlmalloc_ext_2_8_6.c:1079:24: note: within this loop
 1079 |             for(++i; i != next_i; ++i) {
      |                      ~~^~~~~~~~~
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/dlmalloc.o
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/global_resource.o
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/monotonic_buffer_resource.o
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/pool_resource.o
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/synchronized_pool_resource.o
gcc.compile.c++ bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unsynchronized_pool_resource.o
gcc.link.dll bin.v2/libs/container/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_container.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_container.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_container.so
gcc.compile.asm bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asm/make_x86_64_sysv_elf_gas.o
gcc.compile.asm bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asm/jump_x86_64_sysv_elf_gas.o
gcc.compile.asm bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asm/ontop_x86_64_sysv_elf_gas.o
gcc.compile.c++ bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/execution_context.o
gcc.compile.c++ bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/stack_traits.o
gcc.link.dll bin.v2/libs/context/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_context.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_context.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_context.so
gcc.compile.c++ bin.v2/libs/contract/build/gcc-13.2.0/release/threading-multi/visibility-hidden/contract.o
gcc.link.dll bin.v2/libs/contract/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_contract.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_contract.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_contract.so
gcc.compile.c++ bin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/pthread/thread.o
In file included from /usr/include/pthread.h:33,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr-default.h:35,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr.h:148,
                 from /usr/include/c++/13/ext/atomicity.h:35,
                 from /usr/include/c++/13/bits/ios_base.h:39,
                 from /usr/include/c++/13/ios:44,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/system/error_code.hpp:17,
                 from ./boost/system/system_error.hpp:11,
                 from ./boost/thread/exceptions.hpp:22,
                 from ./boost/thread/pthread/thread_data.hpp:10,
                 from ./boost/thread/thread_only.hpp:17,
                 from libs/thread/src/pthread/thread.cpp:11:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/thread/detail/thread.hpp:38,
                 from ./boost/thread/thread_only.hpp:22:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/thread/exceptions.hpp:20:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
In file included from ./boost/concept/assert.hpp:35,
                 from ./boost/concept_check.hpp:20,
                 from ./boost/range/concepts.hpp:19,
                 from ./boost/range/size_type.hpp:20,
                 from ./boost/range/size.hpp:21,
                 from ./boost/range/functions.hpp:20,
                 from ./boost/range/iterator_range_core.hpp:38,
                 from ./boost/algorithm/string/iter_find.hpp:19,
                 from ./boost/algorithm/string/split.hpp:16,
                 from libs/thread/src/pthread/thread.cpp:34:
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/iter_find.hpp:77:13:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/algorithm/string/iter_find.hpp:26:
./boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >; IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/concept_check.hpp:31:
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
./boost/range/concepts.hpp:152:13:   [ skipping 17 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/range/concepts.hpp:152:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
./boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >)>’
./boost/range/concepts.hpp:278:9:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/range/concepts.hpp:278:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
./boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   30 |       ~model()
      |       ^
./boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’:
./boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >)>’
./boost/range/algorithm/equal.hpp:174:13:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/range/algorithm/equal.hpp:174:13:   required from ‘bool boost::range::equal(const SinglePassRange1&, const SinglePassRange2&) [with SinglePassRange1 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; SinglePassRange2 = boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/range/iterator_range_core.hpp:646:32:   required from ‘bool boost::operator==(const iterator_range<IteratorT>&, const iterator_range<Iterator2T>&) [with Iterator1T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; Iterator2T = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/find_iterator.hpp:333:32:   required from ‘bool boost::algorithm::split_iterator<IteratorT>::equal(const boost::algorithm::split_iterator<IteratorT>&) const [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
./boost/iterator/iterator_facade.hpp:568:26:   required from ‘static bool boost::iterators::iterator_core_access::equal(const Facade1&, const Facade2&, mpl_::true_) [with Facade1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; Facade2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; mpl_::true_ = mpl_::bool_<true>]’
./boost/iterator/iterator_facade.hpp:900:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator==(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC1 = forward_traversal_tag; Reference1 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference1 = long int; Derived2 = boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; V2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >; TC2 = forward_traversal_tag; Reference2 = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >&; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
./boost/iterator/iterator_adaptor.hpp:305:29:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   30 |       ~model()
      |       ^
./boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:125:16:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   [ skipping 15 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 19 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/range/concepts.hpp:136:13:   required from ‘struct boost::range_detail::IncrementableIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::range_detail::IncrementableIteratorConcept<Iterator>::~IncrementableIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   30 |       ~model()
      |       ^
./boost/range/concepts.hpp:136:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  136 |             BOOST_CONCEPT_USAGE(IncrementableIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/range/concepts.hpp:147:16:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   [ skipping 14 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 18 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/range/concepts.hpp:158:13:   required from ‘struct boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::range_detail::SinglePassIteratorConcept<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::range_detail::SinglePassIteratorConcept<Iterator>::~SinglePassIteratorConcept() [with Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >]’
   30 |       ~model()
      |       ^
./boost/range/concepts.hpp:158:13: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  158 |             BOOST_CONCEPT_USAGE(SinglePassIteratorConcept)
      |             ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >]’
./boost/range/concepts.hpp:284:9:   required from ‘struct boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > >]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::SinglePassRangeConcept<const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > > > >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 8 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/iterator/iterator_facade.hpp:901:3:   required from ‘typename boost::iterators::detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<boost::iterators::detail::always_bool2, Derived1, Derived2>::type>::type boost::iterators::operator!=(const iterator_facade<Derived1, V1, TC1, Reference1, Difference1>&, const iterator_facade<Derived2, V2, TC2, Reference2, Difference2>&) [with Derived1 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V1 = std::__cxx11::basic_string<char>; TC1 = forward_traversal_tag; Reference1 = std::__cxx11::basic_string<char>; Difference1 = long int; Derived2 = transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, use_default, use_default>; V2 = std::__cxx11::basic_string<char>; TC2 = forward_traversal_tag; Reference2 = std::__cxx11::basic_string<char>; Difference2 = long int; typename detail::enable_if_interoperable<Derived1, Derived2, typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type>::type = bool; typename boost::mpl::apply2<detail::always_bool2, Derived1, Derived2>::type = bool]’
/usr/include/c++/13/bits/stl_vector.h:1671:21:   required from ‘void std::vector<_Tp, _Alloc>::_M_range_initialize(_InputIterator, _InputIterator, std::input_iterator_tag) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’
/usr/include/c++/13/bits/stl_vector.h:711:23:   required from ‘std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::__cxx11::basic_string<char>, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::algorithm::split_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >, boost::iterators::use_default, boost::iterators::use_default>; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; allocator_type = std::allocator<std::__cxx11::basic_string<char> >]’
./boost/algorithm/string/iter_find.hpp:178:31:   required from ‘SequenceSequenceT& boost::algorithm::iter_split(SequenceSequenceT&, RangeT&, FinderT) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; FinderT = detail::token_finderF<detail::is_any_ofF<char> >]’
./boost/algorithm/string/split.hpp:146:50:   required from ‘SequenceSequenceT& boost::algorithm::split(SequenceSequenceT&, RangeT&, PredicateT, token_compress_mode_type) [with SequenceSequenceT = std::vector<std::__cxx11::basic_string<char> >; RangeT = std::__cxx11::basic_string<char>; PredicateT = detail::is_any_ofF<char>]’
libs/thread/src/pthread/thread.cpp:537:29:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::SinglePassRangeConcept<T>::~SinglePassRangeConcept() [with T = const boost::iterator_range<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> > >]’
   30 |       ~model()
      |       ^
./boost/range/concepts.hpp:284:9: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  284 |         BOOST_CONCEPT_USAGE(SinglePassRangeConcept)
      |         ^~~~~~~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -pedantic -fvisibility=hidden -Wextra -Wno-long-long -Wno-unused-parameter -Wunused-function -pedantic -DBOOST_ALL_NO_LIB=1 -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_DONT_USE_CHRONO -DBOOST_THREAD_POSIX -DNDEBUG  -I"." -c -o "bin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/pthread/thread.o" "libs/thread/src/pthread/thread.cpp"

...failed gcc.compile.c++ bin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/pthread/thread.o...
...on 15400th target...
gcc.compile.c++ bin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/pthread/once.o
gcc.compile.c++ bin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/future.o
...skipped <pbin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_thread.so.1.69.0 for lack of <pbin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>pthread/thread.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_thread.so.1.69.0 for lack of <pbin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_thread.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_thread.so for lack of <p~/Рабочий стол/Boost/lib>libboost_thread.so.1.69.0...
gcc.compile.c++ bin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/detail/coroutine_context.o
In file included from ./boost/coroutine/detail/coroutine_context.hpp:16,
                 from libs/coroutine/src/detail/coroutine_context.cpp:7:
./boost/coroutine/detail/config.hpp:17:4: warning: #warning "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING." [-Wcpp]
   17 | #  warning                  "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING."
      |    ^~~~~~~
gcc.compile.c++ bin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/exceptions.o
In file included from ./boost/coroutine/exceptions.hpp:19,
                 from libs/coroutine/src/exceptions.cpp:7:
./boost/coroutine/detail/config.hpp:17:4: warning: #warning "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING." [-Wcpp]
   17 | #  warning                  "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING."
      |    ^~~~~~~
gcc.compile.c++ bin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/posix/stack_traits.o
In file included from ./boost/coroutine/stack_traits.hpp:14,
                 from libs/coroutine/src/posix/stack_traits.cpp:7:
./boost/coroutine/detail/config.hpp:17:4: warning: #warning "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING." [-Wcpp]
   17 | #  warning                  "Boost.Coroutine is now deprecated. Please switch to Boost.Coroutine2. To disable this warning message, define BOOST_COROUTINES_NO_DEPRECATION_WARNING."
      |    ^~~~~~~
In file included from /usr/include/pthread.h:33,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr-default.h:35,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr.h:148,
                 from /usr/include/c++/13/ext/atomicity.h:35,
                 from /usr/include/c++/13/bits/ios_base.h:39,
                 from /usr/include/c++/13/ios:44,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/system/error_code.hpp:17,
                 from ./boost/system/system_error.hpp:11,
                 from ./boost/thread/exceptions.hpp:22,
                 from ./boost/thread/pthread/thread_data.hpp:10,
                 from ./boost/thread/thread_only.hpp:17,
                 from ./boost/thread/thread.hpp:12,
                 from ./boost/thread.hpp:13,
                 from libs/coroutine/src/posix/stack_traits.cpp:22:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/thread/detail/thread.hpp:38,
                 from ./boost/thread/thread_only.hpp:22:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/thread/exceptions.hpp:20:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden  -DBOOST_ALL_NO_LIB=1 -DBOOST_CHRONO_DYN_LINK=1 -DBOOST_CONTEXT_DYN_LINK=1 -DBOOST_COROUTINES_DYN_LINK=1 -DBOOST_COROUTINES_SOURCE -DBOOST_DISABLE_ASSERTS -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_DLL=1 -DNDEBUG  -I"." -c -o "bin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/posix/stack_traits.o" "libs/coroutine/src/posix/stack_traits.cpp"

...failed gcc.compile.c++ bin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/posix/stack_traits.o...
...skipped <pbin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_coroutine.so.1.69.0 for lack of <pbin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>posix/stack_traits.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_coroutine.so.1.69.0 for lack of <pbin.v2/libs/coroutine/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_coroutine.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_coroutine.so for lack of <p~/Рабочий стол/Boost/lib>libboost_coroutine.so.1.69.0...
gcc.compile.c++ bin.v2/libs/date_time/build/gcc-13.2.0/release/threading-multi/visibility-hidden/gregorian/greg_month.o
gcc.compile.c++ bin.v2/libs/date_time/build/gcc-13.2.0/release/threading-multi/visibility-hidden/gregorian/greg_weekday.o
gcc.compile.c++ bin.v2/libs/date_time/build/gcc-13.2.0/release/threading-multi/visibility-hidden/gregorian/date_generators.o
gcc.link.dll bin.v2/libs/date_time/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_date_time.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_date_time.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_date_time.so
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/codecvt_error_category.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/operations.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/path.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/path_traits.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/portability.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unique_path.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/utf8_codecvt_facet.o
gcc.compile.c++ bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/windows_file_codecvt.o
gcc.link.dll bin.v2/libs/filesystem/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_filesystem.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_filesystem.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_filesystem.so
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/algo/algorithm.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/algo/round_robin.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/algo/shared_work.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/algo/work_stealing.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/barrier.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/condition_variable.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/context.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fiber.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/future.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/mutex.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/properties.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/recursive_mutex.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/recursive_timed_mutex.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/timed_mutex.o
gcc.compile.c++ bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/scheduler.o
gcc.link.dll bin.v2/libs/fiber/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_fiber.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_fiber.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_fiber.so
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/c_regex_traits.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cpp_regex_traits.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cregex.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/cregex.cpp:22:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fileiter.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/icu.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instances.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/instances.cpp:30:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix_api.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/posix_api.cpp:23:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/regex.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/regex.cpp:24:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/regex_debug.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/regex_raw_buffer.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/regex_traits_defaults.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/static_mutex.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/w32_regex_traits.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/wc_regex_traits.o
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/wide_posix_api.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/wide_posix_api.cpp:25:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/winstances.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/regex/build/../src/winstances.cpp:30:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from ./boost/regex/v4/regex_workaround.hpp:30,
                 from ./boost/regex/v4/regex.hpp:32:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/usinstances.o
gcc.link.dll bin.v2/libs/regex/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_regex.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_regex.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_regex.so
gcc.compile.c++ bin.v2/libs/graph/build/gcc-13.2.0/release/threading-multi/visibility-hidden/read_graphviz_new.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/graph/src/read_graphviz_new.cpp:46:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/functional:49,
                 from ./boost/config/no_tr1/functional.hpp:21,
                 from ./boost/function/detail/prologue.hpp:14,
                 from ./boost/function/function_template.hpp:13,
                 from ./boost/function/detail/maybe_include.hpp:29,
                 from ./boost/function/function2.hpp:11,
                 from libs/graph/src/read_graphviz_new.cpp:31:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
In file included from ./boost/xpressive/detail/core/access.hpp:21,
                 from ./boost/xpressive/detail/core/state.hpp:18,
                 from ./boost/xpressive/detail/core/matcher/alternate_end_matcher.hpp:20,
                 from ./boost/xpressive/detail/core/matchers.hpp:17,
                 from ./boost/xpressive/regex_primitives.hpp:22,
                 from ./boost/xpressive/xpressive_static.hpp:24,
                 from ./boost/graph/graphviz.hpp:34,
                 from libs/graph/src/read_graphviz_new.cpp:50:
./boost/xpressive/match_results.hpp:130:10: warning: ‘template<class _Category, class _Tp, class _Distance, class _Pointer, class _Reference> struct std::iterator’ is deprecated [-Wdeprecated-declarations]
  130 |   : std::iterator<std::output_iterator_tag, Char, void, void, case_converting_iterator<OutputIterator, Char> >
      |          ^~~~~~~~
In file included from /usr/include/c++/13/bits/stl_algobase.h:65,
                 from /usr/include/c++/13/algorithm:60,
                 from ./boost/function/detail/prologue.hpp:13:
/usr/include/c++/13/bits/stl_iterator_base_types.h:127:34: note: declared here
  127 |     struct _GLIBCXX17_DEPRECATED iterator
      |                                  ^~~~~~~~
./boost/xpressive/match_results.hpp:209:10: warning: ‘template<class _Category, class _Tp, class _Distance, class _Pointer, class _Reference> struct std::iterator’ is deprecated [-Wdeprecated-declarations]
  209 |   : std::iterator<std::output_iterator_tag, Char, void, void, noop_output_iterator<Char> >
      |          ^~~~~~~~
/usr/include/c++/13/bits/stl_iterator_base_types.h:127:34: note: declared here
  127 |     struct _GLIBCXX17_DEPRECATED iterator
      |                                  ^~~~~~~~
gcc.compile.c++ bin.v2/libs/graph/build/gcc-13.2.0/release/threading-multi/visibility-hidden/graphml.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/unordered/unordered_set.hpp:18,
                 from ./boost/unordered_set.hpp:17,
                 from ./boost/graph/adjacency_list.hpp:21,
                 from ./boost/graph/graphviz.hpp:24,
                 from ./boost/graph/graphml.hpp:20,
                 from libs/graph/src/graphml.cpp:17:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_traits.hpp:10,
                 from ./boost/range/mutable_iterator.hpp:23,
                 from ./boost/range/iterator.hpp:20,
                 from ./boost/range/end.hpp:25,
                 from ./boost/foreach.hpp:73,
                 from libs/graph/src/graphml.cpp:14:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
In file included from ./boost/xpressive/detail/core/access.hpp:21,
                 from ./boost/xpressive/detail/core/state.hpp:18,
                 from ./boost/xpressive/detail/core/matcher/alternate_end_matcher.hpp:20,
                 from ./boost/xpressive/detail/core/matchers.hpp:17,
                 from ./boost/xpressive/regex_primitives.hpp:22,
                 from ./boost/xpressive/xpressive_static.hpp:24,
                 from ./boost/graph/graphviz.hpp:34:
./boost/xpressive/match_results.hpp:130:10: warning: ‘template<class _Category, class _Tp, class _Distance, class _Pointer, class _Reference> struct std::iterator’ is deprecated [-Wdeprecated-declarations]
  130 |   : std::iterator<std::output_iterator_tag, Char, void, void, case_converting_iterator<OutputIterator, Char> >
      |          ^~~~~~~~
In file included from /usr/include/c++/13/iterator:61:
/usr/include/c++/13/bits/stl_iterator_base_types.h:127:34: note: declared here
  127 |     struct _GLIBCXX17_DEPRECATED iterator
      |                                  ^~~~~~~~
./boost/xpressive/match_results.hpp:209:10: warning: ‘template<class _Category, class _Tp, class _Distance, class _Pointer, class _Reference> struct std::iterator’ is deprecated [-Wdeprecated-declarations]
  209 |   : std::iterator<std::output_iterator_tag, Char, void, void, noop_output_iterator<Char> >
      |          ^~~~~~~~
/usr/include/c++/13/bits/stl_iterator_base_types.h:127:34: note: declared here
  127 |     struct _GLIBCXX17_DEPRECATED iterator
      |                                  ^~~~~~~~
gcc.link.dll bin.v2/libs/graph/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_graph.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_graph.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_graph.so
gcc.compile.c++ bin.v2/libs/iostreams/build/gcc-13.2.0/release/threading-multi/visibility-hidden/file_descriptor.o
gcc.compile.c++ bin.v2/libs/iostreams/build/gcc-13.2.0/release/threading-multi/visibility-hidden/mapped_file.o
gcc.link.dll bin.v2/libs/iostreams/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_iostreams.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_iostreams.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_iostreams.so
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/encoding/codepage.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/date_time.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/format.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/formatting.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/generator.o
In file included from libs/locale/src/shared/generator.cpp:11:
./boost/locale/localization_backend.hpp:109:18: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  109 |             std::auto_ptr<localization_backend> get() const;
      |                  ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from libs/locale/src/shared/generator.cpp:9:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/localization_backend.hpp:116:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  116 |             void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/ids.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/localization_backend.o
In file included from libs/locale/src/shared/localization_backend.cpp:9:
./boost/locale/localization_backend.hpp:109:18: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  109 |             std::auto_ptr<localization_backend> get() const;
      |                  ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from ./boost/locale/localization_backend.hpp:11:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/localization_backend.hpp:116:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  116 |             void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/shared/localization_backend.cpp:185:14: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  185 |         std::auto_ptr<localization_backend> localization_backend_manager::get() const
      |              ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/shared/localization_backend.cpp: In member function ‘std::auto_ptr<boost::locale::localization_backend> boost::locale::localization_backend_manager::get() const’:
libs/locale/src/shared/localization_backend.cpp:187:18: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  187 |             std::auto_ptr<localization_backend> r(pimpl_->create());
      |                  ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/shared/localization_backend.cpp: At global scope:
libs/locale/src/shared/localization_backend.cpp:190:85: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  190 |         void localization_backend_manager::add_backend(std::string const &name,std::auto_ptr<localization_backend> backend)
      |                                                                                     ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
...on 15500th target...
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/message.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/unordered/unordered_map.hpp:18,
                 from ./boost/unordered_map.hpp:17,
                 from libs/locale/src/shared/message.cpp:27:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/locale:41,
                 from ./boost/locale/message.hpp:16,
                 from libs/locale/src/shared/message.cpp:12:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/shared/mo_lambda.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/util/codecvt_converter.o
In file included from libs/locale/src/util/codecvt_converter.cpp:15:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from libs/locale/src/util/codecvt_converter.cpp:9:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/util/codecvt_converter.cpp:273:10: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  273 |     std::auto_ptr<base_converter> create_utf8_converter()
      |          ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/util/codecvt_converter.cpp: In function ‘std::auto_ptr<boost::locale::util::base_converter> boost::locale::util::create_utf8_converter()’:
libs/locale/src/util/codecvt_converter.cpp:275:14: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  275 |         std::auto_ptr<base_converter> res(create_utf8_converter_new_ptr());
      |              ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/util/codecvt_converter.cpp: At global scope:
libs/locale/src/util/codecvt_converter.cpp:278:10: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  278 |     std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding)
      |          ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/util/codecvt_converter.cpp: In function ‘std::auto_ptr<boost::locale::util::base_converter> boost::locale::util::create_simple_converter(const std::string&)’:
libs/locale/src/util/codecvt_converter.cpp:280:14: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  280 |         std::auto_ptr<base_converter> res(create_simple_converter_new_ptr(encoding));
      |              ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
libs/locale/src/util/codecvt_converter.cpp: At global scope:
libs/locale/src/util/codecvt_converter.cpp:283:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  283 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type)
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/util/default_locale.o
In file included from libs/locale/src/util/default_locale.cpp:10:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from ./boost/locale/util.hpp:14:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/util/info.o
In file included from libs/locale/src/util/info.cpp:14:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from libs/locale/src/util/info.cpp:12:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/util/locale_data.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/codecvt.o
In file included from libs/locale/src/posix/codecvt.cpp:13:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/config/no_tr1/memory.hpp:21,
                 from ./boost/smart_ptr/shared_ptr.hpp:23,
                 from ./boost/shared_ptr.hpp:17,
                 from libs/locale/src/posix/codecvt.cpp:10:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/collate.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/converter.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/numeric.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/posix/posix_backend.o
In file included from libs/locale/src/posix/posix_backend.cpp:12:
./boost/locale/localization_backend.hpp:109:18: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  109 |             std::auto_ptr<localization_backend> get() const;
      |                  ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from ./boost/locale/localization_backend.hpp:11:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/localization_backend.hpp:116:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  116 |             void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
In file included from libs/locale/src/posix/posix_backend.cpp:20:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/std/codecvt.o
In file included from libs/locale/src/std/codecvt.cpp:11:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from ./boost/locale/util.hpp:14:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/std/collate.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/std/converter.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/std/numeric.o
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/std/std_backend.o
In file included from libs/locale/src/std/std_backend.cpp:9:
./boost/locale/localization_backend.hpp:109:18: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  109 |             std::auto_ptr<localization_backend> get() const;
      |                  ^~~~~~~~
In file included from /usr/include/c++/13/memory:78,
                 from ./boost/locale/generator.hpp:18,
                 from ./boost/locale/localization_backend.hpp:11:
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/localization_backend.hpp:116:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  116 |             void add_backend(std::string const &name,std::auto_ptr<localization_backend> backend);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
In file included from libs/locale/src/std/std_backend.cpp:14:
./boost/locale/util.hpp:180:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  180 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_utf8_converter();
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:188:28: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  188 |     BOOST_LOCALE_DECL std::auto_ptr<base_converter> create_simple_converter(std::string const &encoding);
      |                            ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
./boost/locale/util.hpp:203:59: warning: ‘template<class> class std::auto_ptr’ is deprecated: use 'std::unique_ptr' instead [-Wdeprecated-declarations]
  203 |     std::locale create_codecvt(std::locale const &in,std::auto_ptr<base_converter> cvt,character_facet_type type);
      |                                                           ^~~~~~~~
/usr/include/c++/13/bits/unique_ptr.h:65:28: note: declared here
   65 |   template<typename> class auto_ptr;
      |                            ^~~~~~~~
gcc.compile.c++ bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/util/gregorian.o
gcc.link.dll bin.v2/libs/locale/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_locale.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_locale.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_locale.so
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/attribute_name.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/attribute_set.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/attribute_value_set.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/code_conversion.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/core.o
In file included from ./boost/config/header_deprecated.hpp:18,
                 from ./boost/pending/integer_log2.hpp:5,
                 from ./boost/random/detail/integer_log2.hpp:19,
                 from ./boost/random/detail/large_arithmetic.hpp:19,
                 from ./boost/random/detail/const_mod.hpp:23,
                 from ./boost/random/detail/seed_impl.hpp:26,
                 from ./boost/random/linear_feedback_shift.hpp:27,
                 from ./boost/random/taus88.hpp:18,
                 from libs/log/src/core.cpp:30:
./boost/config/pragma_message.hpp:24:34: note: ‘#pragma message: This header is deprecated. Use <boost/integer/integer_log2.hpp> instead.’
   24 | # define BOOST_PRAGMA_MESSAGE(x) _Pragma(BOOST_STRINGIZE(message(x)))
      |                                  ^~~~~~~
./boost/config/header_deprecated.hpp:23:37: note: in expansion of macro ‘BOOST_PRAGMA_MESSAGE’
   23 | # define BOOST_HEADER_DEPRECATED(a) BOOST_PRAGMA_MESSAGE("This header is deprecated. Use " a " instead.")
      |                                     ^~~~~~~~~~~~~~~~~~~~
./boost/pending/integer_log2.hpp:7:1: note: in expansion of macro ‘BOOST_HEADER_DEPRECATED’
    7 | BOOST_HEADER_DEPRECATED("<boost/integer/integer_log2.hpp>");
      | ^~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/record_ostream.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/severity_level.o
In file included from /usr/include/x86_64-linux-gnu/bits/local_lim.h:81,
                 from /usr/include/x86_64-linux-gnu/bits/posix1_lim.h:161,
                 from /usr/include/limits.h:195,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:205,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/syslimits.h:7,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:34,
                 from ./boost/log/detail/config.hpp:33,
                 from libs/log/src/severity_level.cpp:16:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/thread/detail/thread.hpp:38,
                 from ./boost/thread/thread_only.hpp:22,
                 from ./boost/thread/thread.hpp:12,
                 from libs/log/src/severity_level.cpp:23:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/functional:49,
                 from ./boost/config/no_tr1/functional.hpp:21,
                 from ./boost/smart_ptr/intrusive_ptr.hpp:24,
                 from ./boost/log/sources/severity_feature.hpp:20,
                 from libs/log/src/severity_level.cpp:18:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden -fno-strict-aliasing -ftemplate-depth-1024 -DBOOST_ALL_NO_LIB=1 -DBOOST_ATOMIC_DYN_LINK=1 -DBOOST_CHRONO_DYN_LINK=1 -DBOOST_DATE_TIME_DYN_LINK=1 -DBOOST_FILESYSTEM_DYN_LINK=1 -DBOOST_LOG_BUILDING_THE_LIB=1 -DBOOST_LOG_DLL -DBOOST_LOG_HAS_PTHREAD_MUTEX_ROBUST -DBOOST_LOG_USE_AVX2 -DBOOST_LOG_USE_NATIVE_SYSLOG -DBOOST_LOG_USE_SSSE3 -DBOOST_LOG_WITHOUT_DEBUG_OUTPUT -DBOOST_LOG_WITHOUT_EVENT_LOG -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_DONT_USE_CHRONO=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_DLL=1 -DDATE_TIME_INLINE -DNDEBUG -D_XOPEN_SOURCE=600 -D__STDC_CONSTANT_MACROS  -I"." -I"libs/log/src" -c -o "bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/severity_level.o" "libs/log/src/severity_level.cpp"

...failed gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/severity_level.o...
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/global_logger_storage.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/named_scope.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/process_name.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/process_id.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/thread_id.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/timer.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/exceptions.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/default_attribute_names.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/default_sink.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/text_ostream_backend.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/text_file_backend.o
In file included from ./boost/concept/assert.hpp:35,
                 from ./boost/concept_check.hpp:20,
                 from ./boost/range/concepts.hpp:19,
                 from ./boost/range/size_type.hpp:20,
                 from ./boost/range/size.hpp:21,
                 from ./boost/range/functions.hpp:20,
                 from ./boost/range/iterator_range_core.hpp:38,
                 from ./boost/algorithm/string/replace.hpp:16,
                 from ./boost/date_time/date_facet.hpp:17,
                 from ./boost/date_time/gregorian/gregorian_io.hpp:16,
                 from ./boost/date_time/gregorian/gregorian.hpp:31,
                 from ./boost/date_time/posix_time/time_formatters.hpp:12,
                 from ./boost/date_time/posix_time/posix_time.hpp:24,
                 from libs/log/src/text_file_backend.cpp:49:
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:99:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<const char*, is_equal>; FormatterT = detail::const_formatF<boost::iterator_range<const char*> >]’
./boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = boost::iterator_range<const char*>; Range2T = boost::iterator_range<const char*>]’
./boost/date_time/time_facet.hpp:293:36:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/algorithm/string/find_format.hpp:22,
                 from ./boost/algorithm/string/replace.hpp:22:
./boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:104:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<const char*, is_equal>; FormatterT = detail::const_formatF<boost::iterator_range<const char*> >]’
./boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = boost::iterator_range<const char*>; Range2T = boost::iterator_range<const char*>]’
./boost/date_time/time_facet.hpp:293:36:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
./boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<const char*> >; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:104:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<const char*, is_equal>; FormatterT = detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >]’
./boost/algorithm/string/replace.hpp:652:48:   required from ‘void boost::algorithm::replace_all(SequenceT&, const Range1T&, const Range2T&) [with SequenceT = std::__cxx11::basic_string<char>; Range1T = const char*; Range2T = std::__cxx11::basic_string<char>]’
./boost/date_time/time_facet.hpp:310:38:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
./boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::const_formatF<boost::iterator_range<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > > >; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::empty_formatF<char>, boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:104:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<const char*, is_equal>; FormatterT = detail::empty_formatF<char>]’
./boost/algorithm/string/erase.hpp:593:48:   required from ‘void boost::algorithm::erase_all(SequenceT&, const RangeT&) [with SequenceT = std::__cxx11::basic_string<char>; RangeT = const char*]’
./boost/date_time/time_facet.hpp:321:38:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
./boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::empty_formatF<char>; FinderT = boost::algorithm::detail::first_finderF<const char*, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FinderConcept<boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:99:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, is_equal>; FormatterT = detail::empty_formatF<char>]’
./boost/algorithm/string/erase.hpp:593:48:   required from ‘void boost::algorithm::erase_all(SequenceT&, const RangeT&) [with SequenceT = std::__cxx11::basic_string<char>; RangeT = std::__cxx11::basic_string<char>]’
./boost/date_time/time_facet.hpp:339:38:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
./boost/algorithm/string/concept.hpp:40:18: note: in a call to non-static member function ‘void boost::algorithm::FinderConcept<FinderT, IteratorT>::constraints() [with FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   40 |             void constraints()
      |                  ^~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::constraint<Model>::failed() [with Model = boost::algorithm::FormatterConcept<boost::algorithm::detail::empty_formatF<char>, boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>, __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> > >]’:
./boost/algorithm/string/find_format.hpp:104:13:   required from ‘void boost::algorithm::find_format_all(SequenceT&, FinderT, FormatterT) [with SequenceT = std::__cxx11::basic_string<char>; FinderT = detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, is_equal>; FormatterT = detail::empty_formatF<char>]’
./boost/algorithm/string/erase.hpp:593:48:   required from ‘void boost::algorithm::erase_all(SequenceT&, const RangeT&) [with SequenceT = std::__cxx11::basic_string<char>; RangeT = std::__cxx11::basic_string<char>]’
./boost/date_time/time_facet.hpp:339:38:   required from ‘OutItrT boost::date_time::time_facet<time_type, CharT, OutItrT>::put(OutItrT, std::ios_base&, char_type, const time_type&) const [with time_type = boost::posix_time::ptime; CharT = char; OutItrT = std::ostreambuf_iterator<char, std::char_traits<char> >; char_type = char]’
libs/log/src/text_file_backend.cpp:242:24:   required from here
./boost/concept/detail/general.hpp:47:52: warning: ‘this’ pointer is null [-Wnonnull]
   47 |     static void failed() { ((Model*)0)->constraints(); }
      |                            ~~~~~~~~~~~~~~~~~~~~~~~~^~
./boost/algorithm/string/concept.hpp:65:18: note: in a call to non-static member function ‘void boost::algorithm::FormatterConcept<FormatterT, FinderT, IteratorT>::constraints() [with FormatterT = boost::algorithm::detail::empty_formatF<char>; FinderT = boost::algorithm::detail::first_finderF<__gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >, boost::algorithm::is_equal>; IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]’
   65 |             void constraints()
      |                  ^~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/text_multifile_backend.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/thread_specific.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/once_block.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/timestamp.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/threadsafe_queue.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/event.o
In file included from /usr/include/x86_64-linux-gnu/bits/local_lim.h:81,
                 from /usr/include/x86_64-linux-gnu/bits/posix1_lim.h:161,
                 from /usr/include/limits.h:195,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:205,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/syslimits.h:7,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:34,
                 from ./boost/log/detail/config.hpp:33,
                 from libs/log/src/event.cpp:16:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden -fno-strict-aliasing -ftemplate-depth-1024 -DBOOST_ALL_NO_LIB=1 -DBOOST_ATOMIC_DYN_LINK=1 -DBOOST_CHRONO_DYN_LINK=1 -DBOOST_DATE_TIME_DYN_LINK=1 -DBOOST_FILESYSTEM_DYN_LINK=1 -DBOOST_LOG_BUILDING_THE_LIB=1 -DBOOST_LOG_DLL -DBOOST_LOG_HAS_PTHREAD_MUTEX_ROBUST -DBOOST_LOG_USE_AVX2 -DBOOST_LOG_USE_NATIVE_SYSLOG -DBOOST_LOG_USE_SSSE3 -DBOOST_LOG_WITHOUT_DEBUG_OUTPUT -DBOOST_LOG_WITHOUT_EVENT_LOG -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_DONT_USE_CHRONO=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_DLL=1 -DDATE_TIME_INLINE -DNDEBUG -D_XOPEN_SOURCE=600 -D__STDC_CONSTANT_MACROS  -I"." -I"libs/log/src" -c -o "bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/event.o" "libs/log/src/event.cpp"

...failed gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/event.o...
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/trivial.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/spirit_encoding.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/format_parser.o
In file included from ./boost/concept/assert.hpp:35,
                 from ./boost/concept_check.hpp:20,
                 from ./boost/range/concepts.hpp:19,
                 from ./boost/range/size_type.hpp:20,
                 from ./boost/range/size.hpp:21,
                 from ./boost/proto/functional/range/size.hpp:12,
                 from ./boost/proto/functional/range.hpp:17,
                 from ./boost/proto/functional.hpp:14,
                 from ./boost/proto/proto.hpp:16,
                 from ./boost/spirit/home/support/meta_compiler.hpp:19,
                 from ./boost/spirit/home/qi/domain.hpp:15,
                 from ./boost/spirit/home/qi/detail/enable_lit.hpp:13,
                 from ./boost/spirit/home/qi/numeric/uint.hpp:17,
                 from ./boost/spirit/include/qi_uint.hpp:16,
                 from libs/log/src/format_parser.cpp:23:
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const char*> >]’:
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/concept_check.hpp:31:
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const char*> >]’:
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const char*> >]’:
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’:
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/preprocessor/control/while.hpp:17,
                 from ./boost/preprocessor/arithmetic/add.hpp:20,
                 from ./boost/phoenix/core/limits.hpp:12,
                 from ./boost/spirit/include/phoenix_limits.hpp:11,
                 from ./boost/spirit/home/support/meta_compiler.hpp:16:
./boost/iterator/iterator_concepts.hpp:40:17: note: in a call to non-static member function ‘boost_concepts::ReadableIteratorConcept<const char*>::~ReadableIteratorConcept()’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:40:3: note: in expansion of macro ‘BOOST_concept’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const char*> >]’:
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const char*> >]’:
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:134:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:134:7:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const char*> >]’:
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:150:7:   [ skipping 3 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:150:7:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’:
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:141:17: note: in a call to non-static member function ‘boost_concepts::ForwardTraversalConcept<const char*>::~ForwardTraversalConcept()’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:141:3: note: in expansion of macro ‘BOOST_concept’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const wchar_t*> >]’:
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const wchar_t*> >]’:
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const wchar_t*> >]’:
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’:
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:40:17: note: in a call to non-static member function ‘boost_concepts::ReadableIteratorConcept<const wchar_t*>::~ReadableIteratorConcept()’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:40:3: note: in expansion of macro ‘BOOST_concept’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const wchar_t*> >]’:
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const wchar_t*> >]’:
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const wchar_t*> >]’:
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’:
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:141:17: note: in a call to non-static member function ‘boost_concepts::ForwardTraversalConcept<const wchar_t*>::~ForwardTraversalConcept()’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:141:3: note: in expansion of macro ‘BOOST_concept’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const char*> >]’
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const char*> >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const char*> >]’
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::ReadableIterator<Iterator>::~ReadableIterator() [with Iterator = const char*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:48:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   48 |       BOOST_CONCEPT_USAGE(ReadableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const char*> >]’
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::IncrementableIterator<Iterator>::~IncrementableIterator() [with Iterator = const char*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:120:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  120 |       BOOST_CONCEPT_USAGE(IncrementableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const char*> >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const char*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = char]’
libs/log/src/format_parser.cpp:137:75:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const wchar_t*> >]’
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::ReadableIterator<Iterator>::~ReadableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:48:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   48 |       BOOST_CONCEPT_USAGE(ReadableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::IncrementableIterator<Iterator>::~IncrementableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:120:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  120 |       BOOST_CONCEPT_USAGE(IncrementableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const wchar_t*> >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = boost::spirit::terminal<boost::spirit::tag::uint_>; Attr = unsigned int]’
libs/log/src/format_parser.cpp:84:30:   required from ‘boost::log::v2_mt_posix::aux::format_description<CharT> boost::log::v2_mt_posix::aux::parse_format(const CharT*, const CharT*) [with CharT = wchar_t]’
libs/log/src/format_parser.cpp:144:84:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/date_time_format_parser.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/named_scope_format_parser.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/unhandled_exception_count.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/permissions.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dump.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dump_avx2.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dump_ssse3.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/posix/ipc_reliable_message_queue.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/posix/object_name.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/syslog_backend.o
...skipped <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_log.so.1.69.0 for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>severity_level.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_log.so.1.69.0 for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_log.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_log.so for lack of <p~/Рабочий стол/Boost/lib>libboost_log.so.1.69.0...
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/parser_utils.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/init_from_stream.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/init_from_settings.o
In file included from /usr/include/x86_64-linux-gnu/bits/local_lim.h:81,
                 from /usr/include/x86_64-linux-gnu/bits/posix1_lim.h:161,
                 from /usr/include/limits.h:195,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:205,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/syslimits.h:7,
                 from /usr/lib/gcc/x86_64-linux-gnu/13/include/limits.h:34,
                 from ./boost/log/detail/config.hpp:33,
                 from ./boost/log/detail/setup_config.hpp:20,
                 from libs/log/src/setup/init_from_settings.cpp:26:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/thread/detail/thread.hpp:38,
                 from ./boost/thread/thread_only.hpp:22,
                 from ./boost/thread/thread.hpp:12,
                 from ./boost/log/sinks/async_frontend.hpp:39,
                 from ./boost/log/sinks.hpp:25,
                 from libs/log/src/setup/init_from_settings.cpp:54:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/ios:44,
                 from libs/log/src/setup/init_from_settings.cpp:28:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden -fno-strict-aliasing -ftemplate-depth-1024 -DBOOST_ALL_NO_LIB=1 -DBOOST_ATOMIC_DYN_LINK=1 -DBOOST_CHRONO_DYN_LINK=1 -DBOOST_DATE_TIME_DYN_LINK=1 -DBOOST_FILESYSTEM_DYN_LINK=1 -DBOOST_LOG_DYN_LINK=1 -DBOOST_LOG_HAS_PTHREAD_MUTEX_ROBUST -DBOOST_LOG_SETUP_BUILDING_THE_LIB=1 -DBOOST_LOG_SETUP_DLL -DBOOST_LOG_USE_AVX2 -DBOOST_LOG_USE_NATIVE_SYSLOG -DBOOST_LOG_USE_SSSE3 -DBOOST_LOG_WITHOUT_EVENT_LOG -DBOOST_SPIRIT_USE_PHOENIX_V3=1 -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_DONT_USE_CHRONO=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_DLL=1 -DDATE_TIME_INLINE -DNDEBUG -D_XOPEN_SOURCE=600 -D__STDC_CONSTANT_MACROS  -I"." -I"libs/log/src" -c -o "bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/init_from_settings.o" "libs/log/src/setup/init_from_settings.cpp"

...failed gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/init_from_settings.o...
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/settings_parser.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/filter_parser.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/formatter_parser.o
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/default_filter_factory.o
In file included from ./boost/concept/assert.hpp:35,
                 from ./boost/concept_check.hpp:20,
                 from ./boost/range/concepts.hpp:19,
                 from ./boost/range/size_type.hpp:20,
                 from ./boost/range/size.hpp:21,
                 from ./boost/proto/functional/range/size.hpp:12,
                 from ./boost/proto/functional/range.hpp:17,
                 from ./boost/proto/functional.hpp:14,
                 from ./boost/proto/proto.hpp:16,
                 from ./boost/spirit/home/support/meta_compiler.hpp:19,
                 from ./boost/spirit/home/qi/domain.hpp:15,
                 from ./boost/spirit/home/qi/parser.hpp:15,
                 from ./boost/spirit/include/qi_core.hpp:16,
                 from libs/log/src/setup/default_filter_factory.cpp:22:
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const char*> >]’:
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/concept_check.hpp:31:
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const char*> >]’:
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const char*> >]’:
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’:
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
In file included from ./boost/mpl/vector.hpp:23,
                 from libs/log/src/setup/default_filter_factory.cpp:20:
./boost/iterator/iterator_concepts.hpp:40:17: note: in a call to non-static member function ‘boost_concepts::ReadableIteratorConcept<const char*>::~ReadableIteratorConcept()’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:40:3: note: in expansion of macro ‘BOOST_concept’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:114:7:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:114:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const char*> >]’:
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const char*> >]’:
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:134:7:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:134:7:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const char*> >]’:
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const char*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’:
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>)>’
./boost/iterator/iterator_concepts.hpp:150:7:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
./boost/iterator/iterator_concepts.hpp:150:7:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ForwardTraversalConcept<const char*>]’:
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:141:17: note: in a call to non-static member function ‘boost_concepts::ForwardTraversalConcept<const char*>::~ForwardTraversalConcept()’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:141:3: note: in expansion of macro ‘BOOST_concept’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const wchar_t*> >]’:
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const wchar_t*> >]’:
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const wchar_t*> >]’:
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’:
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:40:17: note: in a call to non-static member function ‘boost_concepts::ReadableIteratorConcept<const wchar_t*>::~ReadableIteratorConcept()’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:40:3: note: in expansion of macro ‘BOOST_concept’
   40 |   BOOST_concept(ReadableIterator,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const wchar_t*> >]’:
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const wchar_t*> >]’:
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const wchar_t*> >]’:
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:16:5: note: in a call to non-static member function ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const wchar_t*>]’
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |     ^
./boost/concept/detail/general.hpp: In instantiation of ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost_concepts::ForwardTraversalConcept<const wchar_t*>]’:
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/detail/general.hpp:39:47: warning: ‘this’ pointer is null [-Wnonnull]
   39 |     static void failed() { ((Model*)0)->~Model(); }
      |                            ~~~~~~~~~~~~~~~~~~~^~
./boost/iterator/iterator_concepts.hpp:141:17: note: in a call to non-static member function ‘boost_concepts::ForwardTraversalConcept<const wchar_t*>::~ForwardTraversalConcept()’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |                 ^~~~~~~~~~~~~~~~
./boost/preprocessor/cat.hpp:29:34: note: in definition of macro ‘BOOST_PP_CAT_I’
   29 | #    define BOOST_PP_CAT_I(a, b) a ## b
      |                                  ^
./boost/concept/detail/concept_def.hpp:23:12: note: in expansion of macro ‘BOOST_PP_CAT’
   23 |     struct BOOST_PP_CAT(name,Concept)                                           \
      |            ^~~~~~~~~~~~
./boost/iterator/iterator_concepts.hpp:141:3: note: in expansion of macro ‘BOOST_concept’
  141 |   BOOST_concept(ForwardTraversal,(Iterator))
      |   ^~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const char*> >]’
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const char*> >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const char*> >]’
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const char*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::ReadableIterator<Iterator>::~ReadableIterator() [with Iterator = const char*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:48:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   48 |       BOOST_CONCEPT_USAGE(ReadableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::incrementable_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::incrementable_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const char*> >]’
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::IncrementableIterator<Iterator>::~IncrementableIterator() [with Iterator = const char*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:120:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  120 |       BOOST_CONCEPT_USAGE(IncrementableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const char*> >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const char*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::single_pass_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::single_pass_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const char*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const char*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const char*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const char*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const char*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >]’
./boost/concept_check.hpp:208:5:   required from ‘struct boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost::Convertible<boost::iterators::random_access_traversal_tag, boost::iterators::forward_traversal_tag> >’
./boost/concept/detail/general.hpp:51:8:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const char*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const char*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const char*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = char; string_type = std::__cxx11::basic_string<char>]’
libs/log/src/setup/default_filter_factory.cpp:299:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Convertible<X, Y>::~Convertible() [with X = boost::iterators::random_access_traversal_tag; Y = boost::iterators::forward_traversal_tag]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:208:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  208 |     BOOST_CONCEPT_USAGE(Convertible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::Assignable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::Assignable<const wchar_t*> >]’
./boost/concept_check.hpp:145:5:   required from ‘struct boost::Assignable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::Assignable<TT>::~Assignable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:145:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  145 |     BOOST_CONCEPT_USAGE(Assignable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::CopyConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::CopyConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:167:5:   required from ‘struct boost::CopyConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::CopyConstructible<TT>::~CopyConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:167:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  167 |     BOOST_CONCEPT_USAGE(CopyConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::ReadableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::ReadableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:48:7:   required from ‘struct boost_concepts::ReadableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:40:3:   required from ‘struct boost_concepts::ReadableIteratorConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   required by substitution of ‘template<class Model> boost::concepts::detail::yes boost::concepts::detail::has_constraints_(Model*, wrap_constraints<Model, (& Model::constraints)>*) [with Model = boost_concepts::ReadableIteratorConcept<const wchar_t*>]’
./boost/concept/detail/has_constraints.hpp:42:5:   required from ‘const bool boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >::value’
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ReadableIteratorConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ReadableIteratorConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:34:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::ReadableIterator<Iterator>::~ReadableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:48:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
   48 |       BOOST_CONCEPT_USAGE(ReadableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost_concepts::IncrementableIterator<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost_concepts::IncrementableIterator<const wchar_t*> >]’
./boost/iterator/iterator_concepts.hpp:120:7:   required from ‘struct boost_concepts::IncrementableIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost_concepts::IncrementableIterator<Iterator>::~IncrementableIterator() [with Iterator = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/iterator/iterator_concepts.hpp:120:7: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  120 |       BOOST_CONCEPT_USAGE(IncrementableIterator)
      |       ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::EqualityComparable<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::EqualityComparable<const wchar_t*> >]’
./boost/concept_check.hpp:233:5:   required from ‘struct boost::EqualityComparable<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:129:3:   required from ‘struct boost_concepts::SinglePassIterator<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::EqualityComparable<TT>::~EqualityComparable() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:233:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  233 |     BOOST_CONCEPT_USAGE(EqualityComparable) {
      |     ^~~~~~~~~~~~~~~~~~~
./boost/concept/usage.hpp: In instantiation of ‘boost::concepts::usage_requirements<Model>::~usage_requirements() [with Model = boost::DefaultConstructible<const wchar_t*>]’:
./boost/concept/detail/general.hpp:39:47:   required from ‘static void boost::concepts::requirement<boost::concepts::failed************ Model::************>::failed() [with Model = boost::concepts::usage_requirements<boost::DefaultConstructible<const wchar_t*> >]’
./boost/concept_check.hpp:137:5:   required from ‘struct boost::DefaultConstructible<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversal<const wchar_t*>’
./boost/iterator/iterator_concepts.hpp:141:3:   required from ‘struct boost_concepts::ForwardTraversalConcept<const wchar_t*>’
./boost/concept/detail/has_constraints.hpp:32:62:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./boost/concept/detail/has_constraints.hpp:45:51:   required from ‘struct boost::concepts::not_satisfied<boost_concepts::ForwardTraversalConcept<const wchar_t*> >’
./boost/concept/detail/general.hpp:51:8:   required from ‘struct boost::concepts::requirement_<void (*)(boost_concepts::ForwardTraversalConcept<const wchar_t*>)>’
./boost/spirit/home/qi/parse.hpp:35:9:   required from ‘bool boost::spirit::qi::parse(Iterator&, Iterator, const Expr&, Attr&) [with Iterator = const wchar_t*; Expr = real_parser<double, strict_real_policies<double> >; Attr = double]’
libs/log/src/setup/default_filter_factory.cpp:273:18:   required from ‘static boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::parse_argument(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with RelationT = boost::log::v2_mt_posix::equal_to; CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:195:38:   required from ‘boost::log::v2_mt_posix::filter boost::log::v2_mt_posix::aux::default_filter_factory<CharT>::on_equality_relation(const boost::log::v2_mt_posix::attribute_name&, const string_type&) [with CharT = wchar_t; string_type = std::__cxx11::basic_string<wchar_t>]’
libs/log/src/setup/default_filter_factory.cpp:302:16:   required from here
./boost/concept/usage.hpp:16:48: warning: ‘this’ pointer is null [-Wnonnull]
   16 |     ~usage_requirements() { ((Model*)0)->~Model(); }
      |                             ~~~~~~~~~~~~~~~~~~~^~
./boost/concept/usage.hpp:30:7: note: in a call to non-static member function ‘boost::DefaultConstructible<TT>::~DefaultConstructible() [with TT = const wchar_t*]’
   30 |       ~model()
      |       ^
./boost/concept_check.hpp:137:5: note: in expansion of macro ‘BOOST_CONCEPT_USAGE’
  137 |     BOOST_CONCEPT_USAGE(DefaultConstructible) {
      |     ^~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/matches_relation_factory.o
In file included from ./boost/functional/hash.hpp:6,
                 from ./boost/regex/v4/basic_regex.hpp:23,
                 from ./boost/regex/v4/regex.hpp:67,
                 from ./boost/regex.hpp:31,
                 from libs/log/src/setup/matches_relation_factory.cpp:35:
./boost/container_hash/hash.hpp:130:33: warning: ‘template<class _Arg, class _Result> struct std::unary_function’ is deprecated [-Wdeprecated-declarations]
  130 |         struct hash_base : std::unary_function<T, std::size_t> {};
      |                                 ^~~~~~~~~~~~~~
In file included from /usr/include/c++/13/string:49,
                 from libs/log/src/setup/matches_relation_factory.cpp:30:
/usr/include/c++/13/bits/stl_function.h:117:12: note: declared here
  117 |     struct unary_function
      |            ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/setup/default_formatter_factory.o
...skipped <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_log_setup.so.1.69.0 for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>setup/init_from_settings.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_log_setup.so.1.69.0 for lack of <pbin.v2/libs/log/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_log_setup.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_log_setup.so for lack of <p~/Рабочий стол/Boost/lib>libboost_log_setup.so.1.69.0...
gcc.compile.c++.pch bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/../src/tr1/pch.hpp.gch
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_laguerre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_legendre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/beta.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_2.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_3.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_i.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_j.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_k.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_neumann.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_2.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_3.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expint.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hermite.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/laguerre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/legendre.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/riemann_zeta.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_bessel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_legendre.o
...on 15600th target...
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_neumann.o
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_tr1.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_tr1.so
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_laguerref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/betaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_2f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_3f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_if.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_jf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_kf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_neumannf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_2f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_3f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expintf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hermitef.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/laguerref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/riemann_zetaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_besself.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_legendref.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_neumannf.o
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_tr1f.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1f.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_tr1f.so
gcc.compile.c++ bin.v2/libs/math/config/gcc-13.2.0/release/threading-multi/visibility-hidden/has_long_double_support.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_laguerrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/assoc_legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/betal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_2l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/comp_ellint_3l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_il.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_jl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_bessel_kl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cyl_neumannl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_2l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/ellint_3l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expintl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hermitel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/laguerrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/riemann_zetal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_bessell.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_legendrel.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/sph_neumannl.o
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_tr1l.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_tr1l.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_tr1l.so
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/acosh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asinh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/atanh.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cbrt.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/copysign.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erfc.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expm1.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fmax.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fmin.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fpclassify.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hypot.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lgamma.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/llround.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/log1p.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lround.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nextafter.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nexttoward.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/round.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/tgamma.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/trunc.o
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_c99.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_c99.so
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/acoshf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asinhf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/atanhf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cbrtf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/copysignf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erfcf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erff.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expm1f.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fmaxf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fminf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fpclassifyf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hypotf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lgammaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/llroundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/log1pf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lroundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nextafterf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nexttowardf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/roundf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/tgammaf.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/truncf.o
...on 15700th target...
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_c99f.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99f.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_c99f.so
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/acoshl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/asinhl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/atanhl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cbrtl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/copysignl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erfcl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/erfl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/expm1l.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fmaxl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fminl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/fpclassifyl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/hypotl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lgammal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/llroundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/log1pl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/lroundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nextafterl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/nexttowardl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/roundl.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/tgammal.o
gcc.compile.c++ bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/truncl.o
gcc.link.dll bin.v2/libs/math/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_math_c99l.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_math_c99l.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_math_c99l.so
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cmdline.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/config_file.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/options_description.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/parsers.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/variables_map.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/value_semantic.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/positional_options.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/utf8_codecvt_facet.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/convert.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/winmain.o
gcc.compile.c++ bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/split.o
gcc.link.dll bin.v2/libs/program_options/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_program_options.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_program_options.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_program_options.so
gcc.compile.c++ bin.v2/libs/random/build/gcc-13.2.0/release/threading-multi/visibility-hidden/random_device.o
gcc.link.dll bin.v2/libs/random/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_random.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_random.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_random.so
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_archive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_iserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_oserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_pointer_iserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_pointer_oserializer.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_serializer_map.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_text_iprimitive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_text_oprimitive.o
In file included from libs/serialization/src/basic_text_oprimitive.cpp:20:
./boost/archive/impl/basic_text_oprimitive.ipp: In destructor ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive()’:
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from libs/serialization/src/basic_text_oprimitive.cpp:15:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp: In instantiation of ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive() [with OStream = std::basic_ostream<char>]’:
libs/serialization/src/basic_text_oprimitive.cpp:26:16:   required from here
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_xml_archive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/binary_iarchive.o
In file included from ./boost/detail/endian.hpp:9,
                 from ./boost/archive/impl/basic_binary_iarchive.ipp:25,
                 from libs/serialization/src/binary_iarchive.cpp:20:
./boost/predef/detail/endian_compat.h:11:161: note: ‘#pragma message: The use of BOOST_*_ENDIAN and BOOST_BYTE_ORDER is deprecated. Please include <boost/predef/other/endian.h> and use BOOST_ENDIAN_*_BYTE instead’
   11 | #pragma message("The use of BOOST_*_ENDIAN and BOOST_BYTE_ORDER is deprecated. Please include <boost/predef/other/endian.h> and use BOOST_ENDIAN_*_BYTE instead")
      |                                                                                                                                                                 ^
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/binary_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/extended_type_info.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/extended_type_info_typeid.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/extended_type_info_no_rtti.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/stl_port.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/text_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/text_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_text_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_text_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_binary_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_binary_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_xml_iarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_xml_oarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/void_cast.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/archive_exception.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_grammar.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_iarchive.o
In file included from libs/serialization/src/xml_iarchive.cpp:23:
./boost/archive/impl/xml_iarchive_impl.ipp: In destructor ‘boost::archive::xml_iarchive_impl<Archive>::~xml_iarchive_impl()’:
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/istream:40,
                 from ./boost/archive/xml_iarchive.hpp:19,
                 from libs/serialization/src/xml_iarchive.cpp:17:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp: In instantiation of ‘boost::archive::xml_iarchive_impl<Archive>::~xml_iarchive_impl() [with Archive = boost::archive::xml_iarchive]’:
./boost/archive/xml_iarchive.hpp:127:50:   required from here
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_iarchive_impl.ipp:192:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  192 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_oarchive.o
In file included from libs/serialization/src/xml_oarchive.cpp:23:
./boost/archive/impl/xml_oarchive_impl.ipp: In destructor ‘boost::archive::xml_oarchive_impl<Archive>::~xml_oarchive_impl()’:
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/archive/xml_oarchive.hpp:19,
                 from libs/serialization/src/xml_oarchive.cpp:17:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp: In instantiation of ‘boost::archive::xml_oarchive_impl<Archive>::~xml_oarchive_impl() [with Archive = boost::archive::xml_oarchive]’:
./boost/archive/xml_oarchive.hpp:122:50:   required from here
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_oarchive_impl.ipp:135:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  135 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_archive_exception.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/codecvt_null.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/utf8_codecvt_facet.o
gcc.link.dll bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_serialization.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_serialization.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_serialization.so
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_text_wiprimitive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic_text_woprimitive.o
In file included from libs/serialization/src/basic_text_woprimitive.cpp:26:
./boost/archive/impl/basic_text_oprimitive.ipp: In destructor ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive()’:
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from libs/serialization/src/basic_text_woprimitive.cpp:11:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp: In instantiation of ‘boost::archive::basic_text_oprimitive<OStream>::~basic_text_oprimitive() [with OStream = std::basic_ostream<wchar_t>]’:
libs/serialization/src/basic_text_woprimitive.cpp:31:16:   required from here
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/basic_text_oprimitive.ipp:109:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  109 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/text_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/text_woarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_text_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_text_woarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_wgrammar.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_wiarchive.o
In file included from libs/serialization/src/xml_wiarchive.cpp:28:
./boost/archive/impl/xml_wiarchive_impl.ipp: In destructor ‘boost::archive::xml_wiarchive_impl<Archive>::~xml_wiarchive_impl()’:
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/istream:40,
                 from ./boost/archive/xml_wiarchive.hpp:24,
                 from libs/serialization/src/xml_wiarchive.cpp:22:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp: In instantiation of ‘boost::archive::xml_wiarchive_impl<Archive>::~xml_wiarchive_impl() [with Archive = boost::archive::xml_wiarchive]’:
./boost/archive/xml_wiarchive.hpp:134:52:   required from here
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_wiarchive_impl.ipp:179:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  179 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_woarchive.o
In file included from libs/serialization/src/xml_woarchive.cpp:28:
./boost/archive/impl/xml_woarchive_impl.ipp: In destructor ‘boost::archive::xml_woarchive_impl<Archive>::~xml_woarchive_impl()’:
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
In file included from /usr/include/c++/13/ios:41,
                 from /usr/include/c++/13/ostream:40,
                 from ./boost/archive/xml_woarchive.hpp:30,
                 from libs/serialization/src/xml_woarchive.cpp:22:
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp: In instantiation of ‘boost::archive::xml_woarchive_impl<Archive>::~xml_woarchive_impl() [with Archive = boost::archive::xml_woarchive]’:
./boost/archive/xml_woarchive.hpp:116:52:   required from here
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
./boost/archive/impl/xml_woarchive_impl.ipp:142:31: warning: ‘bool std::uncaught_exception()’ is deprecated: use 'std::uncaught_exceptions()' instead [-Wdeprecated-declarations]
  142 |     if(std::uncaught_exception())
      |        ~~~~~~~~~~~~~~~~~~~~~~~^~
/usr/include/c++/13/exception:122:8: note: declared here
  122 |   bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
      |        ^~~~~~~~~~~~~~~~~~
In file included from ./boost/archive/impl/xml_woarchive_impl.ipp:41:
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘boost::archive::iterators::wchar_from_mb<Base>::sliding_buffer<T>::sliding_buffer() [with T = char; Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:130:31:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:102:30: warning: member ‘boost::archive::iterators::wchar_from_mb<boost::archive::iterators::xml_escape<const char*> >::sliding_buffer<char>::m_buffer’ is used uninitialized [-Wuninitialized]
  102 |             m_next_available(m_buffer.begin()),
      |                              ^~~~~~~~
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘boost::archive::iterators::wchar_from_mb<Base>::sliding_buffer<T>::sliding_buffer() [with T = wchar_t; Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:130:31:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:102:30: warning: member ‘boost::archive::iterators::wchar_from_mb<boost::archive::iterators::xml_escape<const char*> >::sliding_buffer<wchar_t>::m_buffer’ is used uninitialized [-Wuninitialized]
./boost/archive/iterators/wchar_from_mb.hpp: In instantiation of ‘void boost::archive::iterators::wchar_from_mb<Base>::drain() [with Base = boost::archive::iterators::xml_escape<const char*>]’:
./boost/archive/iterators/wchar_from_mb.hpp:133:9:   required from ‘boost::archive::iterators::wchar_from_mb<Base>::wchar_from_mb(T) [with T = const char*; Base = boost::archive::iterators::xml_escape<const char*>]’
./boost/archive/impl/xml_woarchive_impl.ipp:58:9:   required from ‘void boost::archive::save_iterator(std::wostream&, InputIterator, InputIterator) [with InputIterator = const char*; std::wostream = std::basic_ostream<wchar_t>]’
./boost/archive/impl/xml_woarchive_impl.ipp:99:17:   required from ‘void boost::archive::xml_woarchive_impl<Archive>::save(const char*) [with Archive = boost::archive::xml_woarchive]’
libs/serialization/src/xml_woarchive.cpp:35:16:   required from here
./boost/archive/iterators/wchar_from_mb.hpp:168:31: warning: unused variable ‘r’ [-Wunused-variable]
  168 |     std::codecvt_base::result r = m_codecvt_facet.in(
      |                               ^
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_xml_wiarchive.o
gcc.compile.c++ bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/polymorphic_xml_woarchive.o
...on 15800th target...
gcc.link.dll bin.v2/libs/serialization/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_wserialization.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_wserialization.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_wserialization.so
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/noop.o
gcc.link.dll bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_stacktrace_noop.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_noop.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_stacktrace_noop.so
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/backtrace.o
gcc.link.dll bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_stacktrace_backtrace.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_backtrace.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_stacktrace_backtrace.so
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/addr2line.o
gcc.link.dll bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_stacktrace_addr2line.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_addr2line.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_stacktrace_addr2line.so
gcc.compile.c++ bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/basic.o
gcc.link.dll bin.v2/libs/stacktrace/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_stacktrace_basic.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_stacktrace_basic.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_stacktrace_basic.so
gcc.compile.c++ bin.v2/libs/timer/build/gcc-13.2.0/release/threading-multi/visibility-hidden/auto_timers_construction.o
gcc.compile.c++ bin.v2/libs/timer/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cpu_timer.o
gcc.link.dll bin.v2/libs/timer/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_timer.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_timer.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_timer.so
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/execution_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/debug.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cpp_main.o
gcc.link.dll bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_prg_exec_monitor.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_prg_exec_monitor.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_prg_exec_monitor.so
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/compiler_log_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/decorator.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/framework.o
In file included from libs/test/src/framework.cpp:16:
./boost/test/impl/framework.ipp: In member function ‘boost::unit_test::framework::state::execution_result boost::unit_test::framework::state::execute_test_tree(boost::unit_test::test_unit_id, unsigned int, const random_generator_helper*)’:
./boost/test/impl/framework.ipp:763:44: warning: ‘void std::random_shuffle(_RAIter, _RAIter, _Generator&&) [with _RAIter = __gnu_cxx::__normal_iterator<long unsigned int*, vector<long unsigned int> >; _Generator = const boost::unit_test::framework::state::random_generator_helper&]’ is deprecated: use 'std::shuffle' instead [-Wdeprecated-declarations]
  763 |                         std::random_shuffle( children_with_the_same_rank.begin(), children_with_the_same_rank.end(), rand_gen );
      |                         ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/13/functional:67,
                 from ./boost/smart_ptr/detail/shared_count.hpp:38,
                 from ./boost/smart_ptr/shared_ptr.hpp:28,
                 from ./boost/shared_ptr.hpp:17,
                 from ./boost/test/execution_monitor.hpp:24,
                 from ./boost/test/impl/framework.ipp:20:
/usr/include/c++/13/bits/stl_algo.h:4620:5: note: declared here
 4620 |     random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
      |     ^~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/plain_report_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/progress_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/results_collector.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/results_reporter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/test_framework_init_observer.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/test_tools.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/test_tree.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unit_test_log.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unit_test_main.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unit_test_monitor.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/unit_test_parameters.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/junit_log_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_log_formatter.o
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/xml_report_formatter.o
gcc.link.dll bin.v2/libs/test/build/gcc-13.2.0/release/threading-multi/visibility-hidden/libboost_unit_test_framework.so.1.69.0
common.copy ~/Рабочий стол/Boost/lib/libboost_unit_test_framework.so.1.69.0
ln-UNIX ~/Рабочий стол/Boost/lib/libboost_unit_test_framework.so
gcc.compile.c++ bin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o
In file included from /usr/include/pthread.h:33,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr-default.h:35,
                 from /usr/include/x86_64-linux-gnu/c++/13/bits/gthr.h:148,
                 from /usr/include/c++/13/ext/atomicity.h:35,
                 from /usr/include/c++/13/bits/shared_ptr_base.h:61,
                 from /usr/include/c++/13/bits/shared_ptr.h:53,
                 from /usr/include/c++/13/memory:80,
                 from ./boost/config/no_tr1/memory.hpp:21,
                 from ./boost/get_pointer.hpp:14,
                 from ./boost/bind/mem_fn.hpp:25,
                 from ./boost/mem_fn.hpp:22,
                 from ./boost/bind/bind.hpp:26,
                 from ./boost/bind.hpp:22,
                 from ./boost/thread/pthread/shared_mutex.hpp:12,
                 from ./boost/thread/shared_mutex.hpp:28,
                 from libs/type_erasure/src/dynamic_binding.cpp:14:
./boost/thread/pthread/thread_data.hpp:60:5: error: missing binary operator before token "("
   60 | #if PTHREAD_STACK_MIN > 0
      |     ^~~~~~~~~~~~~~~~~

    "g++"   -fvisibility-inlines-hidden -fPIC -m64 -pthread -O3 -finline-functions -Wno-inline -Wall -fvisibility=hidden  -DBOOST_ALL_NO_LIB=1 -DBOOST_CHRONO_DYN_LINK=1 -DBOOST_SYSTEM_DYN_LINK=1 -DBOOST_THREAD_BUILD_DLL=1 -DBOOST_THREAD_POSIX -DBOOST_THREAD_USE_DLL=1 -DBOOST_TYPE_ERASURE_DYN_LINK -DNDEBUG  -I"." -c -o "bin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o" "libs/type_erasure/src/dynamic_binding.cpp"

...failed gcc.compile.c++ bin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden/dynamic_binding.o...
...skipped <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_type_erasure.so.1.69.0 for lack of <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>dynamic_binding.o...
...skipped <p~/Рабочий стол/Boost/lib>libboost_type_erasure.so.1.69.0 for lack of <pbin.v2/libs/type_erasure/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_type_erasure.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_type_erasure.so for lack of <p~/Рабочий стол/Boost/lib>libboost_type_erasure.so.1.69.0...
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_cpp_exprgrammar.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_cpp_exprgrammar.cpp:14:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’ at ./boost/wave/util/macro_helpers.hpp:215:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’ at ./boost/wave/util/macro_helpers.hpp:215:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::util::impl::as_string(IteratorT, const IteratorT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >; IteratorT = std::_List_const_iterator<boost::wave::cpplexer::lex_token<> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_cpp_grammar.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_cpp_literalgrs.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_defined_grammar.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_predef_macros.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_re2c_lexer.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_re2c_lexer.cpp:16:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1719:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1711:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2376:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = char*; T2 = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = char*; ItOrChar = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = const char*; T2 = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = const char*; ItOrChar = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1879:31:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = const char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = const char*; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/instantiate_re2c_lexer_str.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from /usr/include/c++/13/bits/locale_classes.h:40,
                 from /usr/include/c++/13/bits/ios_base.h:41,
                 from /usr/include/c++/13/streambuf:43,
                 from /usr/include/c++/13/bits/streambuf_iterator.h:35,
                 from /usr/include/c++/13/iterator:66,
                 from ./boost/iterator/iterator_categories.hpp:23,
                 from ./boost/iterator/iterator_adaptor.hpp:12,
                 from ./boost/iterator/reverse_iterator.hpp:10,
                 from ./boost/wave/util/flex_string.hpp:90,
                 from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/instantiate_re2c_lexer_str.cpp:16:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1719:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1711:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1725:19,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1731:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(const value_type*) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/token_cache.hpp:49:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::cpplexer::token_cache<StringT>::token_cache() [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:233:13:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_identifier_name(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:107:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:108:21:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:110:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1639:18,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:114:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::operator+=(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1632:20,
    inlined from ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/convert_trigraphs.hpp:118:16:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘StringT boost::wave::cpplexer::impl::convert_trigraphs(const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, size_type, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1510:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage> boost::wave::util::flex_string<E, T, A, Storage>::substr(size_type, size_type) const [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2309:62,
    inlined from ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’ at ./boost/wave/cpplexer/validate_universal_char.hpp:285:17:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::cpplexer::impl::validate_literal(const StringT&, std::size_t, std::size_t, const StringT&) [with StringT = boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2376:19:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:18:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1663:29,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const value_type*, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1666:24,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&, size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1652:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::append(const boost::wave::util::flex_string<E, T, A, Storage>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1644:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2377:35:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<E, T, A, S> boost::wave::util::operator+(const typename flex_string<E, T, A, S>::value_type*, const flex_string<E, T, A, S>&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; S = CowString<AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = char*; T2 = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = char*; ItOrChar = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In constructor ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::erase(size_type, size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1955:15,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::iterator boost::wave::util::flex_string<E, T, A, Storage>::erase(iterator, iterator) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1969:14,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImpl(iterator, iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2079:18,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::ReplaceImplDiscr(iterator, iterator, InputIterator, InputIterator, Selector<0>) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2046:20,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::replace(iterator, iterator, T1, T2) [with T1 = const char*; T2 = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:2107:32,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>& boost::wave::util::flex_string<E, T, A, Storage>::assign(ItOrLength, ItOrChar) [with ItOrLength = const char*; ItOrChar = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1735:21,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(InputIterator, InputIterator, const A&) [with InputIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1521:15,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1879:31:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1902:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1908:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1919:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = const char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1920:28:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘void boost::wave::util::flex_string<E, T, A, Storage>::InsertImpl(iterator, FwdIterator, FwdIterator, std::forward_iterator_tag) [with FwdIterator = const char*; E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::reserve(size_type) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1381:23,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::reserve(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1602:25,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1691:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::append(FwdIterator, FwdIterator) [with FwdIterator = char*; Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1374:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1693:24:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘void boost::wave::util::flex_string<E, T, A, Storage>::push_back(value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘void boost::wave::util::CowString<Storage, Align>::resize(size_type, E) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1367:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type, value_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1591:22,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::resize(size_type) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1594:13,
    inlined from ‘void boost::wave::util::flex_string<E, T, A, Storage>::clear() [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1606:13,
    inlined from ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’ at ./boost/wave/cpplexer/re2clex/cpp_re2c_lexer.hpp:246:20:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In member function ‘TokenT& boost::wave::cpplexer::re2clex::lexer<IteratorT, PositionT, TokenT>::get(TokenT&) [with IteratorT = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; PositionT = boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > >; TokenT = boost::wave::cpplexer::lex_token<boost::wave::util::file_position<boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > > >]’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/token_ids.o
In file included from /usr/include/x86_64-linux-gnu/c++/13/bits/c++allocator.h:33,
                 from /usr/include/c++/13/bits/allocator.h:46,
                 from /usr/include/c++/13/string:43,
                 from libs/wave/src/token_ids.cpp:18:
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1283:23,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
In file included from ./boost/wave/wave_config.hpp:230,
                 from libs/wave/src/token_ids.cpp:22:
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::resize(size_type, E) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:676:16,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1284:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
In member function ‘void std::__new_allocator<_Tp>::deallocate(_Tp*, size_type) [with _Tp = char]’,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::Free(void*, size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:566:22,
    inlined from ‘boost::wave::util::AllocatorStringStorage<E, A>::~AllocatorStringStorage() [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:648:17,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::reserve(size_type) [with E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:702:5,
    inlined from ‘void boost::wave::util::AllocatorStringStorage<E, A>::append(ForwardIterator, ForwardIterator) [with ForwardIterator = const char*; E = char; A = std::allocator<char>]’ at ./boost/wave/util/flex_string.hpp:715:20,
    inlined from ‘boost::wave::util::CowString<Storage, Align>::CowString(const E*, size_type, const allocator_type&) [with Storage = boost::wave::util::AllocatorStringStorage<char>; Align = char*]’ at ./boost/wave/util/flex_string.hpp:1285:22,
    inlined from ‘boost::wave::util::flex_string<E, T, A, Storage>::flex_string(const value_type*, const A&) [with E = char; T = std::char_traits<char>; A = std::allocator<char>; Storage = boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> >]’ at ./boost/wave/util/flex_string.hpp:1506:43,
    inlined from ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’ at libs/wave/src/token_ids.cpp:233:64:
/usr/include/c++/13/bits/new_allocator.h:172:33: warning: ‘void operator delete(void*, std::size_t)’ called on unallocated object ‘boost::wave::util::SimpleStringStorage<char, std::allocator<char> >::emptyString_’ [-Wfree-nonheap-object]
  172 |         _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
      |                                 ^
./boost/wave/util/flex_string.hpp: In function ‘boost::wave::util::flex_string<char, std::char_traits<char>, std::allocator<char>, boost::wave::util::CowString<boost::wave::util::AllocatorStringStorage<char> > > boost::wave::get_token_name(token_id)’:
./boost/wave/util/flex_string.hpp:535:1: note: declared here
  535 | SimpleStringStorage<E, A>::emptyString_ =
      | ^~~~~~~~~~~~~~~~~~~~~~~~~
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/wave_config_constant.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cpplexer/re2clex/aq.o
gcc.compile.c++ bin.v2/libs/wave/build/gcc-13.2.0/release/threading-multi/visibility-hidden/cpplexer/re2clex/cpp_re.o
...skipped <pbin.v2/libs/wave/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_wave.so.1.69.0 for lack of <pbin.v2/libs/thread/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_thread.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_wave.so.1.69.0 for lack of <pbin.v2/libs/wave/build/gcc-13.2.0/release/threadapi-pthread/threading-multi/visibility-hidden>libboost_wave.so.1.69.0...
...skipped <p~/Рабочий стол/Boost/lib>libboost_wave.so for lack of <p~/Рабочий стол/Boost/lib>libboost_wave.so.1.69.0...
gcc.compile.c++ bin.v2/libs/exception/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/clone_current_exception_non_intrusive.o
gcc.archive bin.v2/libs/exception/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_exception.a
common.copy ~/Рабочий стол/Boost/lib/libboost_exception.a
gcc.compile.c++ bin.v2/libs/system/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/error_code.o
gcc.archive bin.v2/libs/system/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_system.a
common.copy ~/Рабочий стол/Boost/lib/libboost_system.a
...on 15900th target...
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/chrono.o
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/thread_clock.o
gcc.compile.c++ bin.v2/libs/chrono/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/process_cpu_clocks.o
gcc.archive bin.v2/libs/chrono/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_chrono.a
common.copy ~/Рабочий стол/Boost/lib/libboost_chrono.a
gcc.compile.c++ bin.v2/libs/timer/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/auto_timers_construction.o
gcc.compile.c++ bin.v2/libs/timer/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/cpu_timer.o
gcc.archive bin.v2/libs/timer/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_timer.a
common.copy ~/Рабочий стол/Boost/lib/libboost_timer.a
gcc.compile.c++ bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/test_main.o
gcc.archive bin.v2/libs/test/build/gcc-13.2.0/release/link-static/threading-multi/visibility-hidden/libboost_test_exec_monitor.a
common.copy ~/Рабочий стол/Boost/lib/libboost_test_exec_monitor.a
...failed updating 12 targets...
...skipped 33 targets...
...updated 15908 targets...
